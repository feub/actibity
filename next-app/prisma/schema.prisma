// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Entities
model User {
  id               Int               @id @default(autoincrement())
  email            String            @unique
  password         String
  name             String?
  role             Role              @default(USER)
  workoutTemplates WorkoutTemplate[]
  workoutSessions  WorkoutSession[]
  profile          Profile?
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
}

model WorkoutTemplate {
  id        Int              @id @default(autoincrement())
  name      String           @db.VarChar(140)
  note      String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id])
  userId    Int
  sets      Set[]
  sessions  WorkoutSession[]

  @@index([userId])
}

model WorkoutSession {
  id                Int              @id @default(autoincrement())
  date              DateTime         @default(now())
  note              String?
  completed         Boolean          @default(false)
  template          WorkoutTemplate? @relation(fields: [workoutTemplateId], references: [id], onDelete: SetNull)
  workoutTemplateId Int?
  user              User             @relation(fields: [userId], references: [id])
  userId            Int
  sessionSets       SessionSet[]

  @@index([userId])
  @@index([workoutTemplateId])
}

model Exercise {
  id   Int               @id @default(autoincrement())
  name String            @db.VarChar(140)
  note String?
  sets ExercisesOnSets[]
}

model Set {
  id              Int               @id @default(autoincrement())
  reps            Int               @default(1)
  position        Int               @default(0)
  workoutTemplate WorkoutTemplate   @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutId       Int
  exercises       ExercisesOnSets[]

  @@index([workoutId])
}

model SessionSet {
  id            Int               @id @default(autoincrement())
  originalSetId Int // No relation to allow template deletion
  reps          Int               @default(1)
  position      Int               @default(0)
  session       WorkoutSession    @relation(fields: [sessionId], references: [id])
  sessionId     Int
  exercises     SessionExercise[]

  @@index([sessionId])
}

model ExercisesOnSets {
  set        Set      @relation(fields: [setId], references: [id], onDelete: Cascade)
  setId      Int
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId Int
  weight     String?
  reps_time  String   @default("1")
  position   Int      @default(0)
  note       String?

  @@id([setId, exerciseId])
  @@index([setId])
  @@index([exerciseId])
}

model SessionExercise {
  id           Int        @id @default(autoincrement())
  sessionSet   SessionSet @relation(fields: [sessionSetId], references: [id])
  sessionSetId Int
  exerciseId   Int // Reference to original exercise
  weight       Decimal?   @db.Decimal(5, 2)
  reps_time    String     @default("1")
  position     Int        @default(0)
  note         String?
  completed    Boolean    @default(false)

  @@index([sessionSetId])
  @@index([exerciseId])
}

enum Role {
  USER
  ADMIN
}
